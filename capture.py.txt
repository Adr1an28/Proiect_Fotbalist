import rclpy
from rclpy.node import Node
import cv2
import numpy as np
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
 
 
class BallFollower(Node):
    def __init__(self):
        super().__init__('ball_follower_node')
        self.get_logger().info('Ball follower node started')
 
        # Camera topic subscriber
        self.subscription = self.create_subscription(
            Image,
            '/camera/image_raw',  # Change topic if needed
            self.image_callback,
            10
        )
 
        # Velocity publisher for movement
        self.publisher = self.create_publisher(Twist, '/cmd_vel', 10)
 
        # CV Bridge to convert ROS Image messages
        self.bridge = CvBridge()
 
        # Initialize state variables
        self.ball_detected = False  # Flag to indicate ball detection
        self.twist = Twist()        # Twist message for controlling the robot
 
    def image_callback(self, data):
        self.get_logger().info('Received image frame')
        try:
            # Convert ROS Image message to OpenCV image
            cv_image = self.bridge.imgmsg_to_cv2(data, desired_encoding='bgr8')
        except CvBridgeError as e:
            self.get_logger().error(f'Error converting image: {e}')
            return
 
        # Convert the image to HSV color space
        hsv_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)
 
        # Define HSV boundaries for blue color detection
        lower_blue = np.array([100, 150, 50])  # Adjust as needed
        upper_blue = np.array([140, 255, 255])
 
        # Create a mask for blue color detection
        blue_mask = cv2.inRange(hsv_image, lower_blue, upper_blue)
 
        # Find contours in the mask
        contours, _ = cv2.findContours(blue_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
 
        # If contours are found, process the largest one
        if contours:
            self.ball_detected = True
            largest_contour = max(contours, key=cv2.contourArea)
            (x, y), radius = cv2.minEnclosingCircle(largest_contour)
 
            # If the ball is large enough, calculate its position
            if radius > 10:  # Adjust threshold as needed
                center_x = int(x)
                self.get_logger().info(f"Ball detected at x: {center_x}, radius: {radius}")
 
                # Control logic to align with and move towards the ball
                image_center_x = cv_image.shape[1] / 2
 
                # Turn robot to center the ball
                if center_x < image_center_x - 50:
                    self.twist.angular.z = 0.3  # Rotate left
                    self.twist.linear.x = 0.0  # Stop forward motion
                elif center_x > image_center_x + 50:
                    self.twist.angular.z = -0.3  # Rotate right
                    self.twist.linear.x = 0.0  # Stop forward motion
                else:
                    self.twist.angular.z = 0.0  # Stop rotation
                    self.twist.linear.x = 0.2  # Move forward
 
                # Add logging here for velocity commands
                self.get_logger().info(
                    f"Publishing velocity command to /cmd_vel: linear.x={self.twist.linear.x}, angular.z={self.twist.angular.z}"
                )
                self.publisher.publish(self.twist)
 
            # If ball is small, ignore and continue rotating
            else:
                self.ball_detected = False
                self.rotate_robot()
        else:
            self.ball_detected = False
            self.rotate_robot()
 
        # Display the detection result
        cv2.imshow("Detected Blue Color", blue_mask)
        cv2.waitKey(3)
 
    def rotate_robot(self):
        # Rotate robot to scan surroundings
        self.get_logger().info("Rotating to scan...")
        self.twist.angular.z = 0.3  # Rotate in place
        self.twist.linear.x = 0.0
 
        # Add logging here for velocity commands
        self.get_logger().info(
            f"Publishing velocity command to /cmd_vel: linear.x={self.twist.linear.x}, angular.z={self.twist.angular.z}"
        )
        self.publisher.publish(self.twist)
 
 
def main(args=None):
    rclpy.init(args=args)
    node = BallFollower()
 
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
 
    # Clean up resources
    node.destroy_node()
    rclpy.shutdown()
    cv2.destroyAllWindows()
 
 
if __name__ == '__main__':
    main()